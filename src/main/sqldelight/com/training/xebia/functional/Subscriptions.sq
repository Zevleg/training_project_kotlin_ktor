import com.training.xebia.functional.domain.UserId;
import com.training.xebia.functional.domain.RepositoryId;

CREATE TABLE IF NOT EXISTS subscriptions (
  user_id BIGSERIAL AS UserId NOT NULL,
  repository_id BIGSERIAL AS RepositoryId NOT NULL,
  subscribed_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (user_id, repository_id),
  FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
  FOREIGN KEY (repository_id) REFERENCES repositories(id) ON DELETE CASCADE
);

delete:
DELETE FROM subscriptions
WHERE user_id = :userId AND repository_id IN (
  SELECT repository_id FROM repositories
  WHERE owner = :owner AND repository = :repository
);

findAll:
SELECT repositories.owner,
       repositories.repository,
       subscriptions.subscribed_at
FROM repositories
INNER JOIN subscriptions ON subscriptions.repository_id = repositories.id
WHERE subscriptions.user_id = :userId;

findSubscribers:
SELECT subscriptions.user_id
FROM subscriptions
INNER JOIN repositories ON subscriptions.repository_id = repositories.id
WHERE repositories.owner = :repositoryOwner
AND   repositories.repository = :repositoryName;

insert:
INSERT INTO subscriptions (user_id, repository_id, subscribed_at)
VALUES (:userId, :repositoryId, :subscribedAt)
ON CONFLICT DO NOTHING;